To solve this problem, we can use a Breadth-First Search (BFS) approach to traverse each level of the binary tree. We'll calculate the average value for each level and store it in an array.
At each level, we sum up the values of the nodes and then divide by the number of nodes to get the average.

Steps:
    1.Use a queue to traverse the tree level by level.
    2.For each level, calculate the sum of the node values, divide by the number of nodes at that level to get the average, and store the result.
    3.After traversing all levels, return the array of averages.


Explanation:
    1.Queue Initialization: Start by initializing a queue to hold nodes for BFS traversal.
    2.Level Sum Calculation:
        .For each level, calculate the sum of all node values and count the number of nodes.
        .Divide the sum by the number of nodes at the level to compute the average.
    3.Store Average in Array: Append the average of each level to the averages array.
    4.Return: After traversing all levels, return the averages array and set returnSize to the number of levels.

Complexity:

Time Complexity: 
𝑂(𝑛), where is the number of nodes, since we visit each node once.


Space Complexity: 
𝑂(𝑚), where 𝑚 is the maximum number of nodes at any level (for the queue and averages array).
